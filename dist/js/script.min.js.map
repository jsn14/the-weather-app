{"version":3,"sources":["script.min.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","Copyright","Location","ApiCall","this","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","error","apiURL","fetch","then","response","json","data","catch","document","querySelector","textContent","Date","getFullYear","2","_classes","api","apiKey","units","mode_message","mode_icon","UIButton","getElementById","userInput","refreshBtn","manual_location","city_entered","checkWeather","src","alert","location","concat","weatherData","currentWeather","city","name","country","sys","icon","weather","temperatue","main","temp","conditions","description","humidity","visibility","pressure","innerHTML","Math","round","console","log","addEventListener","preventDefault","keyCode","window","reload","lat","coords","latitude","lon","longitude","message","./modules/classes"],"mappings":"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","file":"script.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Copyright = exports.Location = exports.ApiCall = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// detect location \nvar Location = function Location() {\n  _classCallCheck(this, Location);\n\n  var location = new Promise(function (resolve, reject) {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        resolve(position);\n      }, function (error) {\n        reject(error);\n      });\n    } else {\n      reject('Location service is not supported by this browser.');\n    }\n\n    ;\n  });\n  return location;\n}; // Api call\n\n\nexports.Location = Location;\n\nvar ApiCall = function ApiCall(apiURL) {\n  _classCallCheck(this, ApiCall);\n\n  var result = new Promise(function (resolve, reject) {\n    fetch(apiURL).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      resolve(data);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n  return result;\n}; // find current year\n\n\nexports.ApiCall = ApiCall;\n\nvar Copyright = function Copyright() {\n  _classCallCheck(this, Copyright);\n\n  var copyrightYear = document.querySelector('#copyright-year');\n  copyrightYear.textContent = new Date().getFullYear();\n}; //exports classes\n\n\nexports.Copyright = Copyright;\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _classes = require(\"./modules/classes\");\n\n// API URL parameters\nvar api = 'https://api.openweathermap.org/data/2.5/weather?';\nvar apiKey = '&APPID=301928bddd4ba25acb86c57cdcd71281';\nvar units = \"metric\"; // api parameter for units\n// select DOM element for status message\n\nvar mode_message = document.querySelector('#message');\nvar mode_icon = document.querySelector('#mode_icon'); // get user input\n\nvar UIButton = document.getElementById(\"submit\");\nvar userInput = document.getElementById(\"city-entered\");\nvar refreshBtn = document.getElementById('refresh-btn'); // get user input on button click\n\nUIButton.addEventListener(\"click\", function () {\n  manual_location();\n}); // get user input when enter key pressed\n\nuserInput.addEventListener('keyup', function (e) {\n  e.preventDefault();\n\n  if (e.keyCode === 13) {\n    manual_location();\n  }\n});\nrefreshBtn.addEventListener('click', function () {\n  window.location.reload();\n}); //update copyright year\n\nnew _classes.Copyright(); // detect location fucntion call\n\ndetectLocation(); //function to detect geoloaction\n\nfunction detectLocation() {\n  //call Location class for geolocation\n  new _classes.Location().then(function (position) {\n    console.log('Location detected');\n    var lat = position.coords.latitude;\n    var lon = position.coords.longitude;\n\n    if (lat !== null && lon !== null) {\n      var coords = 'lat=' + lat + '&lon=' + lon;\n      checkWeather(coords);\n      mode_message.textContent = 'Auto-location';\n      mode_icon.src = 'dist/img/location-arrow.svg';\n    }\n\n    ;\n  }).catch(function (error) {\n    console.log(error.message);\n    mode_message.textContent = error.message;\n  });\n} // function to get manual user input and validate\n\n\nfunction manual_location() {\n  var city_entered = userInput.value;\n\n  if (city_entered) {\n    var location = \"q=\" + city_entered;\n    checkWeather(location);\n    mode_message.textContent = 'Manual Input';\n    mode_icon.src = 'dist/img/kb.svg';\n  } else {\n    alert('invalid user input');\n  }\n} // api call and DOM element updates based on api response\n\n\nfunction checkWeather(location) {\n  //compose api URL\n  var apiURL = \"\".concat(api).concat(location, \"&units=\").concat(units).concat(apiKey); // api call\n\n  new _classes.ApiCall(apiURL).then(function (weatherData) {\n    // set object to collect required weather data from API Promise\n    var currentWeather = {\n      city: weatherData.name,\n      country: weatherData.sys.country,\n      icon: weatherData.weather[0].icon,\n      temperatue: weatherData.main.temp,\n      conditions: weatherData.weather[0].description,\n      humidity: weatherData.main.humidity,\n      visibility: weatherData.visibility,\n      pressure: weatherData.main.pressure\n    }; // set variables to select DOM elements\n\n    var city = document.querySelector('#city');\n    var temp = document.querySelector('#temp');\n    var icon = document.querySelector('#icon');\n    var conditions = document.querySelector('#current-condition');\n    var humidity = document.querySelector('#humidity');\n    var visibility = document.querySelector('#visibility');\n    var pressure = document.querySelector('#pressure'); // push changes to selected DOM elements\n\n    city.textContent = currentWeather.city + ', ' + currentWeather.country;\n    icon.src = \"http://openweathermap.org/img/wn/\".concat(currentWeather.icon, \"@2x.png\");\n    temp.innerHTML = Math.round(currentWeather.temperatue);\n    conditions.textContent = currentWeather.conditions;\n    humidity.textContent = currentWeather.humidity;\n    visibility.textContent = currentWeather.visibility / 1000;\n    pressure.textContent = currentWeather.pressure / 10;\n    console.log('Weather UI updated');\n  });\n}\n\n},{\"./modules/classes\":1}]},{},[2]);\n"]}